/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jianqing.netflix;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MovieMetadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4633810546201309274L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MovieMetadata\",\"namespace\":\"com.jianqing.netflix\",\"fields\":[{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"year\",\"type\":\"int\",\"default\":0},{\"name\":\"director\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"budget\",\"type\":\"int\",\"default\":0},{\"name\":\"box_office\",\"type\":\"int\",\"default\":0},{\"name\":\"characters\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Actor\",\"fields\":[{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"birthday\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String title;
  @Deprecated public String time;
  @Deprecated public int year;
  @Deprecated public String director;
  @Deprecated public int budget;
  @Deprecated public int box_office;
  @Deprecated public java.util.List<Actor> characters;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MovieMetadata() {}

  /**
   * All-args constructor.
   * @param title The new value for title
   * @param time The new value for time
   * @param year The new value for year
   * @param director The new value for director
   * @param budget The new value for budget
   * @param box_office The new value for box_office
   * @param characters The new value for characters
   */
  public MovieMetadata(String title, String time, Integer year, String director, Integer budget, Integer box_office, java.util.List<Actor> characters) {
    this.title = title;
    this.time = time;
    this.year = year;
    this.director = director;
    this.budget = budget;
    this.box_office = box_office;
    this.characters = characters;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return title;
    case 1: return time;
    case 2: return year;
    case 3: return director;
    case 4: return budget;
    case 5: return box_office;
    case 6: return characters;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: title = (String)value$; break;
    case 1: time = (String)value$; break;
    case 2: year = (Integer)value$; break;
    case 3: director = (String)value$; break;
    case 4: budget = (Integer)value$; break;
    case 5: box_office = (Integer)value$; break;
    case 6: characters = (java.util.List<Actor>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public String getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public String getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(String value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(Integer value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'director' field.
   * @return The value of the 'director' field.
   */
  public String getDirector() {
    return director;
  }

  /**
   * Sets the value of the 'director' field.
   * @param value the value to set.
   */
  public void setDirector(String value) {
    this.director = value;
  }

  /**
   * Gets the value of the 'budget' field.
   * @return The value of the 'budget' field.
   */
  public Integer getBudget() {
    return budget;
  }

  /**
   * Sets the value of the 'budget' field.
   * @param value the value to set.
   */
  public void setBudget(Integer value) {
    this.budget = value;
  }

  /**
   * Gets the value of the 'box_office' field.
   * @return The value of the 'box_office' field.
   */
  public Integer getBoxOffice() {
    return box_office;
  }

  /**
   * Sets the value of the 'box_office' field.
   * @param value the value to set.
   */
  public void setBoxOffice(Integer value) {
    this.box_office = value;
  }

  /**
   * Gets the value of the 'characters' field.
   * @return The value of the 'characters' field.
   */
  public java.util.List<Actor> getCharacters() {
    return characters;
  }

  /**
   * Sets the value of the 'characters' field.
   * @param value the value to set.
   */
  public void setCharacters(java.util.List<Actor> value) {
    this.characters = value;
  }

  /**
   * Creates a new MovieMetadata RecordBuilder.
   * @return A new MovieMetadata RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new MovieMetadata RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MovieMetadata RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new MovieMetadata RecordBuilder by copying an existing MovieMetadata instance.
   * @param other The existing instance to copy.
   * @return A new MovieMetadata RecordBuilder
   */
  public static Builder newBuilder(MovieMetadata other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for MovieMetadata instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MovieMetadata>
    implements org.apache.avro.data.RecordBuilder<MovieMetadata> {

    private String title;
    private String time;
    private int year;
    private String director;
    private int budget;
    private int box_office;
    private java.util.List<Actor> characters;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.year)) {
        this.year = data().deepCopy(fields()[2].schema(), other.year);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.director)) {
        this.director = data().deepCopy(fields()[3].schema(), other.director);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.budget)) {
        this.budget = data().deepCopy(fields()[4].schema(), other.budget);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.box_office)) {
        this.box_office = data().deepCopy(fields()[5].schema(), other.box_office);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.characters)) {
        this.characters = data().deepCopy(fields()[6].schema(), other.characters);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MovieMetadata instance
     * @param other The existing instance to copy.
     */
    private Builder(MovieMetadata other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.time)) {
        this.time = data().deepCopy(fields()[1].schema(), other.time);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.year)) {
        this.year = data().deepCopy(fields()[2].schema(), other.year);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.director)) {
        this.director = data().deepCopy(fields()[3].schema(), other.director);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.budget)) {
        this.budget = data().deepCopy(fields()[4].schema(), other.budget);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.box_office)) {
        this.box_office = data().deepCopy(fields()[5].schema(), other.box_office);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.characters)) {
        this.characters = data().deepCopy(fields()[6].schema(), other.characters);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public String getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public Builder setTitle(String value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public String getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public Builder setTime(String value) {
      validate(fields()[1], value);
      this.time = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public Builder clearTime() {
      time = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public Integer getYear() {
      return year;
    }

    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public Builder setYear(int value) {
      validate(fields()[2], value);
      this.year = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public Builder clearYear() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'director' field.
      * @return The value.
      */
    public String getDirector() {
      return director;
    }

    /**
      * Sets the value of the 'director' field.
      * @param value The value of 'director'.
      * @return This builder.
      */
    public Builder setDirector(String value) {
      validate(fields()[3], value);
      this.director = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'director' field has been set.
      * @return True if the 'director' field has been set, false otherwise.
      */
    public boolean hasDirector() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'director' field.
      * @return This builder.
      */
    public Builder clearDirector() {
      director = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'budget' field.
      * @return The value.
      */
    public Integer getBudget() {
      return budget;
    }

    /**
      * Sets the value of the 'budget' field.
      * @param value The value of 'budget'.
      * @return This builder.
      */
    public Builder setBudget(int value) {
      validate(fields()[4], value);
      this.budget = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'budget' field has been set.
      * @return True if the 'budget' field has been set, false otherwise.
      */
    public boolean hasBudget() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'budget' field.
      * @return This builder.
      */
    public Builder clearBudget() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'box_office' field.
      * @return The value.
      */
    public Integer getBoxOffice() {
      return box_office;
    }

    /**
      * Sets the value of the 'box_office' field.
      * @param value The value of 'box_office'.
      * @return This builder.
      */
    public Builder setBoxOffice(int value) {
      validate(fields()[5], value);
      this.box_office = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'box_office' field has been set.
      * @return True if the 'box_office' field has been set, false otherwise.
      */
    public boolean hasBoxOffice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'box_office' field.
      * @return This builder.
      */
    public Builder clearBoxOffice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'characters' field.
      * @return The value.
      */
    public java.util.List<Actor> getCharacters() {
      return characters;
    }

    /**
      * Sets the value of the 'characters' field.
      * @param value The value of 'characters'.
      * @return This builder.
      */
    public Builder setCharacters(java.util.List<Actor> value) {
      validate(fields()[6], value);
      this.characters = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'characters' field has been set.
      * @return True if the 'characters' field has been set, false otherwise.
      */
    public boolean hasCharacters() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'characters' field.
      * @return This builder.
      */
    public Builder clearCharacters() {
      characters = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public MovieMetadata build() {
      try {
        MovieMetadata record = new MovieMetadata();
        record.title = fieldSetFlags()[0] ? this.title : (String) defaultValue(fields()[0]);
        record.time = fieldSetFlags()[1] ? this.time : (String) defaultValue(fields()[1]);
        record.year = fieldSetFlags()[2] ? this.year : (Integer) defaultValue(fields()[2]);
        record.director = fieldSetFlags()[3] ? this.director : (String) defaultValue(fields()[3]);
        record.budget = fieldSetFlags()[4] ? this.budget : (Integer) defaultValue(fields()[4]);
        record.box_office = fieldSetFlags()[5] ? this.box_office : (Integer) defaultValue(fields()[5]);
        record.characters = fieldSetFlags()[6] ? this.characters : (java.util.List<Actor>) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
